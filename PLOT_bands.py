#!/usr/bin/env python
"""
Convert the CP2K band structure output to CSV files
"""

import re
import argparse
import numpy as np

# Regex matching
#-----------------------------------------
SET_MATCH = re.compile(r'''
[ ]*
  SET: [ ]* (?P<setnr>\d+) [ ]*
  TOTAL [ ] POINTS: [ ]* (?P<totalpoints>\d+) [ ]*
  \n
(?P<content>
  [\s\S]*?(?=\n.*?[ ] SET|$)  # match everything until next 'SET' or EOL
)
''', re.VERBOSE)

SPOINTS_MATCH = re.compile(r'''
[ ]*
  POINT [ ]+ (?P<pointnr>\d+) [ ]+ (?P<a>\S+) [ ]+ (?P<b>\S+) [ ]+ (?P<c>\S+)
''', re.VERBOSE)

POINTS_MATCH = re.compile(r'''
[ ]*
  Nr\. [ ]+ (?P<nr>\d+) [ ]+
  Spin [ ]+ (?P<spin>\d+) [ ]+
  K-Point [ ]+ (?P<a>\S+) [ ]+ (?P<b>\S+) [ ]+ (?P<c>\S+) [ ]*
  \n
[ ]* (?P<npoints>\d+) [ ]* \n
(?P<values>
  [\s\S]*?(?=\n.*?[ ] Nr|$)  # match everything until next 'Nr.' or EOL
)
''', re.VERBOSE)


# Command line praser
#----------------------------
parser = argparse.ArgumentParser(description='Generate band structrue plot for CP2K.')
parser.add_argument('-bsfilename', action="store", default=str('band.bs'), dest="bsfilename",
                    help='the band structure file generated by CP2K (Default=band.bs)')
parser.add_argument('-spin', action="store", default=1, dest="spin", type=int,
                    help='spin polarized? (1->no, 2->yes, Default="1")')
parser.add_argument('-noplot', action="store_false", default=True, dest="plot",
                    help='Plot bands? (Default=True)')
parser.add_argument('--fermi', action="store", default=0, dest="Ef", type=float,
                    help='Fermi energy. (Default=0)')
parser.add_argument('-k', '--kpoints', action="store",type=str, dest='kpts', default=None,
                    help='kpoint path. (e.g. GMKG)')
parser.add_argument('-s', '--size', nargs=2, action="store", type=float, default=(3.0,4.0), dest="figsize",
                    help='figure size of the output plot.')
parser.add_argument('--ylim', nargs=2, action="store", default=(-3,3), dest="ylim",
                    help='energy range of the band plot.')
parser.add_argument('-o','--output', action="store", default="band.png", dest="bandimage",
                    help="Filename for band image.")
parser.add_argument('-quiet', action="store_true", default=False, dest="quiet",
                    help="don't show plot directly.")

args = parser.parse_args()

# Open file and read
#----------------------------
with open(args.bsfilename, 'r') as fhandle:
    for kpoint_set in SET_MATCH.finditer(fhandle.read()):
        filename = "{}.set-{}".format(args.bsfilename,
                                          kpoint_set.group('setnr'))
        set_content = kpoint_set.group('content')

        # get number of special points
        nspcp = 0
        for point in SPOINTS_MATCH.finditer(set_content):
            nspcp += 1
            # print("  {pointnr}: {a}/{b}/{c}".format(
            #     **point.groupdict()))

        nspin = args.spin
        if nspin == 2:
            data_up = []
            data_dn = []
            for ispin in range(nspin):
                # generate data
                ind = 0
                for point in POINTS_MATCH.finditer(set_content):
                    ind += 1
                    if ispin == 0 and (ind+1)%2 == 0: # spin up
                        results = point.groupdict()
                        results['values'] = results['values'].split()
                        data_up.append([results['a'],results['b'],results['c']]+results['values'])
                    elif ispin == 1 and (ind)%2 == 0: # spin up
                        results = point.groupdict()
                        results['values'] = results['values'].split()
                        data_dn.append([results['a'],results['b'],results['c']]+results['values'])
        elif nspin == 1:
            data = []
            for point in POINTS_MATCH.finditer(set_content):
                results = point.groupdict()
                results['values'] = results['values'].split()
                data.append([results['a'],results['b'],results['c']]+results['values'])
        else:
            print('wrong spin number, exiting...')
            exit()


# Write data to file
#----------------------------
if args.spin == 2:
    kpts_up  = np.array(data_up,dtype=np.float64)[:,0:3]
    bands_up = np.array(data_up,dtype=np.float64)[:,3:]
    kpts_dn  = np.array(data_dn,dtype=np.float64)[:,0:3]
    bands_dn = np.array(data_dn,dtype=np.float64)[:,3:]
    path = []
    path_temp = 0
    for ikpt in range(len(kpts_up)):
        if ikpt == 0:
            path.append(0)
        else:
            path_temp += np.linalg.norm(kpts_up[ikpt]-kpts_up[ikpt-1])
            path.append(path_temp)

    with open('band_up.dat', 'w') as file:
        for ibnd in range(len(bands_up[0,:])):
            file.write("\n")
            for ikpt in range(len(kpts_up)):
                file.write("{} {} \n".format(path[ikpt],bands_up[ikpt,ibnd]))


    with open('band_dn.dat', 'w') as file:
        for ibnd in range(len(bands_dn[0,:])):
            file.write("\n")
            for ikpt in range(len(kpts_dn)):
                file.write("{} {} \n".format(path[ikpt],bands_dn[ikpt,ibnd]))
else:
    kpts = np.array(data,dtype=np.float64)[:,0:3]
    bands = np.array(data,dtype=np.float64)[:,3:]

    path = []
    path_temp = 0
    for ikpt in range(len(kpts)):
        if ikpt == 0:
            path.append(0)
        else:
            path_temp += np.linalg.norm(kpts[ikpt]-kpts[ikpt-1])
            path.append(path_temp)

    with open('band.dat', 'w') as file:
        for ibnd in range(len(bands[0,:])):
            file.write("\n")
            for ikpt in range(len(kpts)):
                file.write("{} {} \n".format(path[ikpt],bands[ikpt,ibnd]))


# Plot data
#----------------------------
if args.plot == True:
    import matplotlib.pyplot as plt
    width, height = args.figsize
    ymin, ymax = args.ylim
    dpi = 300 #args.dpi
    if args.spin == 2:
        fig = plt.figure()
        fig.set_size_inches(width, height)
        ax = plt.subplot(111)
        fermi = args.Ef * np.ones(bands_up.shape[0])
        for ibnd in range(len(bands_up[0,:])):
            line, = ax.plot(path, bands_up[:, ibnd]-fermi,color='#1f77b4',alpha=0.6)

        for ibnd in range(len(bands_dn[0,:])):
            line, = ax.plot(path, bands_dn[:, ibnd]-fermi,color='#ff7f0e',alpha=0.6)

        nspcp_path = np.floor((len(path)-1)/(nspcp-1))
        xpos = []
        for bd in range(nspcp):
            xpos.append(path[int(bd*nspcp_path)])

        for bd in xpos:
            ax.axvline(x=bd,ls='-', color='k', lw=0.5, alpha=0.5)

        ax.set_xticks(xpos)
        if args.kpts:
            kname = [x.upper() for x in args.kpts]
            for ii in range(len(kname)):
                if kname[ii] == 'G':
                    kname[ii] = r'$\mathrm{\mathsf{\Gamma}}$'
                else:
                    kname[ii] = r'$\mathrm{\mathsf{%s}}$' % kname[ii]
            ax.set_xticklabels(kname)
        else:
            ax.set_xticklabels([])

        ax.set_ylabel('Energy [eV]', labelpad=5)
        ax.set_ylim(ymin, ymax)
        ax.set_xlim(np.array(path).min(), np.array(path).max())
        plt.tight_layout(pad=0.20)
        plt.savefig(args.bandimage, dpi=dpi)

    else:
        fig = plt.figure()
        fig.set_size_inches(width, height)
        ax = plt.subplot(111)
        fermi = args.Ef * np.ones(bands.shape[0])
        for ibnd in range(len(bands[0,:])):
            line, = ax.plot(path, bands[:, ibnd]-fermi,color='#1f77b4',alpha=0.8)

        nspcp_path = np.floor((len(path)-1)/(nspcp-1))
        xpos = []
        for bd in range(nspcp):
            xpos.append(path[int(bd*nspcp_path)])

        for bd in xpos:
            ax.axvline(x=bd,ls='-', color='k', lw=0.5, alpha=0.5)

        ax.set_xticks(xpos)
        if args.kpts:
            kname = [x.upper() for x in args.kpts]
            for ii in range(len(kname)):
                if kname[ii] == 'G':
                    kname[ii] = r'$\mathrm{\mathsf{\Gamma}}$'
                else:
                    kname[ii] = r'$\mathrm{\mathsf{%s}}$' % kname[ii]
            ax.set_xticklabels(kname)
        else:
            ax.set_xticklabels([])


        ax.set_ylabel('Energy [eV]', labelpad=5)
        ax.set_ylim(ymin, ymax)
        ax.set_xlim(np.array(path).min(), np.array(path).max())
        plt.tight_layout(pad=0.20)
        plt.savefig(args.bandimage, dpi=dpi)

# show plot
#----------------------------
if not args.quiet:
    from subprocess import call
    # show plot in iterm2
    call(['/Users/chengcheng_xiao/.iterm2/imgcat ', args.bandimage])
    # show plot using feh
    #call(['feh', '-xdF', opts.bandimage])
